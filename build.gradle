import static org.gradle.api.JavaVersion.VERSION_1_7

import org.ajoberstar.grgit.Grgit
import org.ajoberstar.gradle.git.release.opinion.Strategies

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.bmuschko:gradle-nexus-plugin:2.1.1'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath 'org.ajoberstar:gradle-git:0.12.0'
    }
}

apply plugin: 'org.ajoberstar.release-opinion'

release {
    grgit = Grgit.open(project.file('.'))
    // add SNAPSHOT strategy for Maven / CI
    versionStrategy Strategies.SNAPSHOT
}

// For a release we want a 'clean build' for each module.
// Task ordering configured in subprojects { ... }
tasks.release.dependsOn(['clean', 'build'].collect { task ->
    subprojects.collect { project ->
        ":" + project.name + ":" + task
    }.flatten()
}.flatten())

ext {
    guavaVersion = '18.0'
}

subprojects {
    apply plugin: 'java'

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    // add "provided" scope to Gradle
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    apply plugin: 'license'
    apply plugin: 'com.bmuschko.nexus'

    apply plugin: 'org.ajoberstar.github-pages'

    group = 'de.nehlmeier.common'
    sourceCompatibility = VERSION_1_7
    project.tasks.build.mustRunAfter ":$project.name:clean"

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "http://oss.sonatype.org/content/groups/google/"
        }
    }

    githubPages {
        repoUri = 'https://github.com/jnehlmeier/common'
        commitMessage "Upload JavaDoc: $project.name/$project.version"
        pages {
            from javadoc.outputs.files
            into "docs/$project.name/$project.version"
        }
    }

    license {
        header rootProject.file('config/LICENSE-FILE-HEADER')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
    }

    modifyPom {
        project {
            name "$project.group:$project.name"
            description "Common utilities used by my other projects"
            inceptionYear 2014
            packaging 'jar'
            url "https://jnehlmeier.github.io/$rootProject.name"

            scm {
                connection "scm:git:https://github.com/jnehlmeier/$rootProject.name" + ".git"
                developerConnection "scm:git:git@github.com:jnehlmeier/$rootProject.name" + ".git"
                url "https://github.com/jnehlmeier/$rootProject.name"
            }

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'jnehlmeier'
                    name 'Jens Nehlmeier'
                    email 'jens@nehlmeier.de'
                    url 'http://nehlmeier.de'
                    roles {
                        role 'owner'
                        role 'developer'
                    }
                }
            }
        }
    }

}